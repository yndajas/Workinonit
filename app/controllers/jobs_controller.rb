class JobsController < ApplicationController
    before_action :redirect_if_not_logged_in

    def new
        @countries = ProviderCountry.all
        @job = Job.new
    end

    def create
        # if here from user providing URL on /jobs/new
        if params[:job_url]
            attributes_or_error = JobScraper.scrape_job_by_url(params[:job_url])

            # if attributes_or_error variable is a string, process as an error message, else use to create job (and associate with current user) and redirect to show
            if attributes_or_error.is_a?(String)
                redirect_to new_job_path, flash: {type: 'danger', content: attributes_or_error}
            else
                job = Job.find_or_create_by_attributes_hash_with_user(attributes_or_error, current_user)
                redirect_to job_path(job, job.slug)
            end

        # if here from user manually entering job details on /jobs/new
        elsif params[:job]
            job = Job.find_or_create_by_attributes_hash_with_user(job_params, current_user)
            redirect_to job_path(job, job.slug)
        
        # if here from search results (save jobs) on /jobs/search/:country_code/:location/:keywords
        elsif params[:job_ids]
            country_id = params[:country_id].to_i
            attributes_hashes = JobScraper.scrape_jobs_by_id_hash(params[:job_ids], country_id)
            attributes_hashes.each do |attributes|
                Job.find_or_create_by_attributes_hash_with_user(attributes, current_user)
            end
            redirect_to jobs_path
        
        # if here from job show page (for a job the user hasn't saved to their account) on /jobs/:id/:slug
        else
            job = UserJob.create(user_id: current_user.id, job_id: params[:job_id]).job
            redirect_to job_path(job, job.slug)
        end
    end

    def show
        @job = Job.find_by(id: params[:id])

        # if job exists, check if it's user generated
        if @job
            @user_generated = !@job.provider_id

            # if user-generated, get the associated user job
            @user_job = UserJob.find_by(job_id: @job.id) if @user_generated
        end

        # if the job exists and it's from a provider (not user generated) or generated by the current user
        if @job && (!@user_generated || @user_job.try(:user_id) == current_user.id)
            # if @user_job is not already set, find it
            @user_job = UserJob.find_by(job_id: @job.id, user_id: current_user.id) if !@user_job
            @application = Application.find_by(user_id: current_user.id, job_id: @job.id)
            render :show
        else
            redirect_to jobs_path, flash: {type: 'warning', content: "Job not found"}
        end
    end

    def index
        @jobs = current_user.jobs
    end

    def destroy
        UserJob.find(job_id: params[:id]).destroy
        Application.where(user_id: current_user.id, job_id: params[:id]).destroy_all
        redirect_to jobs_path
    end

    private

    def job_params
        params.require(:job).permit(:title, :company_name, :location, :salary, :contract, :description, :custom_url)
    end
end