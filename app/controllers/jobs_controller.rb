class JobsController < ApplicationController
    before_action :redirect_if_not_logged_in

    def new
        @countries = ProviderCountry.all
        @job = Job.new
    end

    def create
        # if here from user providing URL on /jobs/new
        if params[:job_url]
            attributes_or_error = JobScraper.scrape_job_by_url(params[:job_url])

            # if attributes_or_error variable is a string, process as an error message, else use to create job (and associate with current user) and redirect to show
            if attributes_or_error.is_a?(String)
                redirect_to new_job_path, flash: {type: 'danger', content: attributes_or_error}
            else
                job = Job.find_or_create_by_attributes_hash_with_user(attributes_or_error, current_user)
                redirect_to job_path(job, job.slug)
            end

        # if here from user manually entering job details on /jobs/new
        elsif params[:job]
            job = Job.find_or_create_by_attributes_hash_with_user(job_params, current_user)
            redirect_to job_path(job, job.slug)
        
        # if here from search results (save jobs) on /jobs/search/:country_code/:location/:keywords
        elsif params[:job_ids]
            country_id = params[:country_id].to_i
            attributes_hashes = JobScraper.scrape_jobs_by_id_hash(params[:job_ids], country_id)
            attributes_hashes.each do |attributes|
                Job.find_or_create_by_attributes_hash_with_user(attributes, current_user)
            end
            redirect_to jobs_path
        
        # if here from job show page (for a job the user hasn't saved to their account) on /jobs/:id/:slug
        else
            job = UserJob.create(user_id: current_user.id, job_id: params[:job_id]).job
            redirect_to job_path(job, job.slug)
        end
    end

    def show
        @job = Job.find_by(id: params[:id])

        # if job exists, check if it's user generated
        if @job
            @user_generated = @job.user_generated?

            # if user-generated, get the associated user job
            @user_job = UserJob.find_by_job(@job) if @user_generated
        end

        # if the job exists and it's from a provider (not user generated) or generated by the current user
        if @job && (!@user_generated || @user_job.try(:user) == current_user)
            # if @user_job is not already set, find it
            @user_job = UserJob.find_by_user_and_job(current_user, @job) if !@user_job
            @application = Application.find_by_user_job(@user_job) if @user_job
            render :show
        else
            redirect_to jobs_path, flash: {type: 'warning', content: "Job not found"}
        end
    end

    def index
        # get filtered and ordered company/ies and user jobs
        # if here from /companies/:id/:slug/jobs
        if params[:id]
            @company = Company.find_by_id(params[:id])
            
            if @company
                user_jobs = UserJob.find_by_user_and_company_reverse_chronological(current_user, @company)
                redirect_to companies_path, flash: {type: 'warning', content: "No saved jobs found at company"} if user_jobs.length == 0
            else
                redirect_to companies_path, flash: {type: 'warning', content: "Company not found"}
            end
        # if here from /jobs/unapplied        
        elsif request.path == "/jobs/unapplied"
            user_jobs = UserJob.find_by_user_and_unapplied_reverse_chronological(current_user)
        # if here from /jobs
        else
            @companies = current_user.companies_alphabetical
            user_jobs = UserJob.find_by_user_reverse_chronological(current_user)
        end

        # get jobs and applications associated with the user jobs
        @job_activities = user_jobs.collect do |user_job|
            user_job_saved_at = user_job.created_at
            job = user_job.job
            application = Application.find_by_user_job(user_job)
            
            {user_job_saved_at: user_job_saved_at, job: job, application: application}
        end

        # if here from /companies/:id/:slug/jobs, render special view (else default to regular index)
        if params[:id]
            render :index_by_company
        # if here from /jobs/unapplied        
        elsif request.path == "/jobs/unapplied"
            render :index_by_unapplied
        end
    end

    def filter
        if params[:company_id]
            company = Company.find(params[:company_id])
            redirect_to company_jobs_path(company, company.slug)
        else
            if params[:status] == "Application started"
                redirect_to applications_path
            else
                redirect_to unapplied_jobs_path
            end
        end
    end

    def destroy
        user_job = UserJob.find_by_user_and_job(current_user, Job.find(params[:id]))
        job = user_job.job

        user_job.application.try(:destroy)
        user_job.destroy
        job.destroy if job.user_generated?
        
        redirect_to jobs_path, flash: {type: 'success', content: "Successfully removed job"}
    end

    private

    def job_params
        params.require(:job).permit(:title, :company_name, :location, :salary, :contract, :description, :custom_url)
    end
end